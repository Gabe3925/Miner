<!-- GAME  -->

<audio autoplay="autoplay" loop="loop">
  <source src="<%= asset_path("drippy_cave.mp3") %>" type="audio/mpeg">
  <source src="<%= asset_path("drippy_cave.ogg") %>" type="audio/ogg">
  <embed height="5" width="10" src="<%= asset_path("drippy_cave.mp3") %>">
</audio>

<!-- INCLUDES ALL SCRIPT FILES, FOR USE IN THIS GAME -->
<%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>

<!-- These are divs for the margins & button areas.
The game floats above these, but is buffered by the margin divs which float -->

  <div class="game-left-margin-div"></div>
  <div class="game-top-margin-div"></div>

  <!-- BUTTON TO TAKE YOU BACK TO HQ -->
  <div id="stop-mining">
    <p><%= link_to "Home", user_path(@user), id: 'link-to-hq' %><img src="<%=   asset_path("sack.png") %>" width=90% align="left"></a></p>
  </div>


<script>

var seconds = 0;
// Score is the dollars from user db:
var score = <%= @user.dollars.to_json %>;
var scoreText;
//Depth from user mine in db
var depth = <%= @mine.depth.to_json %>;
var depthText;
//Tool speed for the tool which current user has equipped
// ( used as a depth-rate and point-rate modifier below)
var toolSpeed = <%= @tool.speed.to_json %>;
var toolSpeedText;
// Tool is the users current equipped tool:
var tool = "<%= @curr_tool_name %>";
var toolText;

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload() {

  game.load.image('cave', '<%= asset_path("cave.png") %>');
  game.load.image('stone', '<%= asset_path("stone.jpg") %>');
  game.load.spritesheet('miner', '<%= asset_path("large-miner.png")%>',650,600,7);
  game.load.audio("axe_strike", '<%= asset_path("Mining.mp3")%>');
  game.load.audio("effort", '<%= asset_path("Effort.mp3")%>');
}

function create() {

   //  A simple background for the mine
   game.add.sprite(0, 0, 'cave');
   //  The rocks group is comprised of all the stones which make the mine wall
   rocks = game.add.group();
   // Create sounds for mining
   effort = game.add.audio('effort', 1, false);
   axeStrike = game.add.audio('axe_strike', 1, false);
   //  Here we'll create 12 rocks spaced apart
   for (var i = 0; i < 12; i++)
   {
       //  Now let's create a rock
       var aRock = rocks.create((i * 100)-100, -100, 'stone');
       aRock.body.immovable = true;
        var aRock = rocks.create((i * 100)-100, 150, 'stone');
       aRock.body.immovable = true;
        var aRock = rocks.create((i * 100)-100, 370, 'stone');
       aRock.body.immovable = true;
   }
   // The player-sprite and its location
   player = game.add.sprite(100, 100, 'miner');

   //  The two animations, mining left and right.
   player.animations.add('left', [0, 1, 2], 10, true);
   player.animations.add('right', [3, 4, 5], 10, true);

   //  Score
   scoreText = game.add.text(16, 16, 'Funds: $' + score,
    { fontSize: '32px', fill: '#fff' });

   //  Mine Depth
   depthText = game.add.text(500, 16, 'Mine Depth: ' + depth + ' ft',
    { fontSize: '32px', fill: '#fff'});

   //  Current tool equipped
   toolText = game.add.text(250, 16, tool,
    { fontSize: '32px', fill: '#fff'});

    //  tool speed text (for development only)
   toolSpeedText = game.add.text(250, 32, toolSpeed,
    { fontSize: '32px', fill: '#fff'});

   //  Our controls.
   cursors = game.input.keyboard.createCursorKeys();

}

function update() {

   // MINE TO THE LEFT
    if (cursors.left.isDown)
    {

      //Mining sounds
      if (axeStrike.isPlaying || effort.isPlaying){
        console.log('mining left!');

      }
      else{
        seconds =  seconds + 1;
        effort.play();
        axeStrike.play();

      }

      //Animation
      player.animations.play('left');

    }

    //  MINE TO THE RIGHT:
    else if (cursors.right.isDown)
    {

      //Sounds:
      if (axeStrike.isPlaying || effort.isPlaying){

        console.log('mining right!');


      }
      else{

        seconds =  seconds + 1;
        effort.play();
        axeStrike.play();

      }

      //Animations:
      player.animations.play('right');

    }

    //  REST
    else
    {

      player.animations.stop();
      player.frame = 6;
    }


// GAIN POINTS AND DEPTH WITH A PICKAXE;
  function pickAxe() {
    if(seconds > 5) {

    //  update the score and depth

      // Adds to initial score (which in turn, was drawn from db...)
      // Also takes into account Tool Speed for equipped tool
      score = score + Math.floor((Math.random() * 10) % 5 * toolSpeed);
      scoreText.setText('Funds: $' + score);
      console.log(score);

      //SHOULD PUSH UPDATED SCORE BACK TO DB!!

      // Adds to initial depth...
      // Also takes into account Tool Speed for equipped tool
      depth = depth + (Math.random() * 1) % 0.9 * toolSpeed;
      var depthToDisplay = Math.round(depth*10)/10
      depthText.setText('Mine Depth: ' + depthToDisplay + 'ft');
      console.log(depth);

      seconds = seconds - 5;
      updateScore();
      updateDepth();
      console.log(seconds);
    }
  }
  pickAxe();
}




function updateScore() {
  console.log(score);

$.ajax({
    type: 'PATCH',
    headers: {
    'X-CSRF-Token': '<%= form_authenticity_token.to_s %>'
    },
    url: '<%= update_dollars_path %>',
    dataType: "JSON",
    asnyc: false,
    data: {
      'updatedFunds' : score,
      'user_id' : <%= @user.id %>
    }

  });

};

function updateDepth() {
  console.log(depth);

$.ajax({
    type: 'PATCH',
    headers: {
    'X-CSRF-Token': '<%= form_authenticity_token.to_s %>'
    },
    url: '<%= update_depth_path %>',
    dataType: "JSON",
    asnyc: false,
    data: {
      'updatedDepth' : depth,
      'user_id' : <%= @user.id %>
    }

  });

};


</script>
